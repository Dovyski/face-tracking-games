<?php

/**
 * Obtains all measurements of a given subjects, crunching all the numbers.
 */

require_once(dirname(__FILE__) . '/config.php');

if (php_sapi_name() != 'cli') {
    echo 'This script should be run from the command line.';
    exit();
}

if($argc != 2) {
    echo "Usage: \n";
    echo "  php analyze.php <subjectId>\n";
    exit(1);
}

$aSubjectId = $argv[1];
$aExperiment = null;
$aGames = array();

$aDb = new PDO('sqlite:' . DB_FILE);
$aDb->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// Get info about all games (name, id, etc)
$aResult = $aDb->query("SELECT id,name FROM games WHERE 1");
foreach ($aResult as $aGameInfo) {
    $aGames[$aGameInfo['id']] = $aGameInfo['name'];
}

// Get all data generated by the informed subject
$aStmt = $aDb->prepare("SELECT * FROM logs WHERE uuid = :uuid ORDER BY timestamp ASC");
$aStmt->bindParam(':uuid', $aSubjectId);
$aStmt->execute();

$aStats = array('games' => array(), 'rests' => array());
$aTimeStarted = 0;
$aInRest = false;
$aInGame = false;
$aHREntries = array();

while($aRow = $aStmt->fetch(PDO::FETCH_ASSOC)) {
    $aData = json_decode($aRow['data']);

    if($aData != null) {
        foreach($aData as $aItem) {
            $aEntry = json_decode($aItem->d);

            if(is_string($aEntry)) {
                // This is a milestone mark (start of the game, end of rest, etc.)
                switch($aEntry) {
                    case 'game_start':
                    case 'tutorial_start':
                        if(!$aInGame) {
                            $aInGame = true;
                            $aHREntries = array();
                            $aTimeStarted = (int)($aItem->t / 1000.0);
                        }
                        break;

                    case 'game_end':
                        $aStats['games'][] = array(
                            'id' => $aRow['fk_game'],
                            'name'=> $aGames[$aRow['fk_game']],
                            'hr' => $aHREntries,
                            'start' => $aTimeStarted,
                            'end' => (int)($aItem->t / 1000.0)
                        );
                        $aInGame = false;
                        break;

                    case 'experiment_rest_start':
                        $aInRest = true;
                        $aHREntries = array();
                        $aTimeStarted = $aRow['timestamp'];
                        break;

                    case 'experiment_game_start':
                        if($aInRest) {
                            $aStats['rests'][] = array(
                                'hr' => $aHREntries,
                                'start' => $aTimeStarted,
                                'end' => $aRow['timestamp']
                            );
                            $aInRest = false;
                        }
                        break;
                }
            } else {
                // This is data collected from a game or the HR watch.
                // Let's handle it

                if(property_exists($aEntry, 'hr')) {
                    // It's a HR entry
                    $aHREntries[] = $aEntry->hr;
                } else {
                    // It's a game entry (action, hit, etc)
                }
            }
        }

    } else {
        echo "Warning: unable to parse data ".$aRow['data']."\n";
    }
}

print_r($aStats);

?>
